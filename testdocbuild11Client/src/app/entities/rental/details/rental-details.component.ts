import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { RentalService } from '../rental.service';
import { IRental } from '../irental';
import { BaseDetailsComponent, Globals, PickerDialogService, ErrorService } from 'src/app/common/shared';
import { GlobalPermissionService } from 'src/app/core/global-permission.service';

import { CustomerService } from 'src/app/entities/customer/customer.service';
import { InventoryService } from 'src/app/entities/inventory/inventory.service';
import { StaffService } from 'src/app/entities/staff/staff.service';

@Component({
  selector: 'app-rental-details',
  templateUrl: './rental-details.component.html',
  styleUrls: ['./rental-details.component.scss'],
})
export class RentalDetailsComponent extends BaseDetailsComponent<IRental> implements OnInit {
  title = 'Rental';
  parentUrl = 'rental';
  constructor(
    public formBuilder: FormBuilder,
    public router: Router,
    public route: ActivatedRoute,
    public dialog: MatDialog,
    public global: Globals,
    public rentalService: RentalService,
    public pickerDialogService: PickerDialogService,
    public errorService: ErrorService,
    public customerService: CustomerService,
    public inventoryService: InventoryService,
    public staffService: StaffService,
    public globalPermissionService: GlobalPermissionService
  ) {
    super(formBuilder, router, route, dialog, global, pickerDialogService, rentalService, errorService);
  }

  ngOnInit() {
    this.entityName = 'Rental';
    this.setAssociations();
    super.ngOnInit();
    this.setForm();
    this.getItem();
    this.setPickerSearchListener();
  }

  setForm() {
    this.itemForm = this.formBuilder.group({
      lastUpdate: ['', Validators.required],
      lastUpdateTime: ['', Validators.required],
      rentalDate: ['', Validators.required],
      rentalDateTime: ['', Validators.required],
      rentalId: [{ value: '', disabled: true }, Validators.required],
      returnDate: [''],
      returnDateTime: [''],
      customerId: ['', Validators.required],
      customerDescriptiveField: ['', Validators.required],
      inventoryId: ['', Validators.required],
      inventoryDescriptiveField: ['', Validators.required],
      staffId: ['', Validators.required],
      staffDescriptiveField: ['', Validators.required],
    });

    this.fields = [
      {
        name: 'lastUpdate',
        label: 'last Update',
        isRequired: true,
        isAutoGenerated: false,
        type: 'date',
      },
      {
        name: 'lastUpdateTime',
        label: 'last Update Time',
        isRequired: true,
        isAutoGenerated: false,
        type: 'time',
      },
      {
        name: 'rentalDate',
        label: 'rental Date',
        isRequired: true,
        isAutoGenerated: false,
        type: 'date',
      },
      {
        name: 'rentalDateTime',
        label: 'rental Date Time',
        isRequired: true,
        isAutoGenerated: false,
        type: 'time',
      },
      {
        name: 'returnDate',
        label: 'return Date',
        isRequired: false,
        isAutoGenerated: false,
        type: 'date',
      },
      {
        name: 'returnDateTime',
        label: 'return Date Time',
        isRequired: false,
        isAutoGenerated: false,
        type: 'time',
      },
    ];
  }

  onItemFetched(item: IRental) {
    this.item = item;
    this.itemForm.patchValue(item);
    this.itemForm.get('lastUpdate').setValue(item.lastUpdate ? new Date(item.lastUpdate) : null);
    this.itemForm.get('lastUpdateTime').setValue(this.rentalService.formatDateStringToAMPM(item.lastUpdate));
    this.itemForm.get('rentalDate').setValue(item.rentalDate ? new Date(item.rentalDate) : null);
    this.itemForm.get('rentalDateTime').setValue(this.rentalService.formatDateStringToAMPM(item.rentalDate));
    this.itemForm.get('returnDate').setValue(item.returnDate ? new Date(item.returnDate) : null);
    this.itemForm.get('returnDateTime').setValue(this.rentalService.formatDateStringToAMPM(item.returnDate));
  }

  setAssociations() {
    this.associations = [
      {
        column: [
          {
            key: 'customerId',
            value: undefined,
            referencedkey: 'customerId',
          },
        ],
        isParent: false,
        table: 'customer',
        type: 'ManyToOne',
        label: 'customer',
        service: this.customerService,
        descriptiveField: 'customerDescriptiveField',
        referencedDescriptiveField: 'customerId',
      },
      {
        column: [
          {
            key: 'inventoryId',
            value: undefined,
            referencedkey: 'inventoryId',
          },
        ],
        isParent: false,
        table: 'inventory',
        type: 'ManyToOne',
        label: 'inventory',
        service: this.inventoryService,
        descriptiveField: 'inventoryDescriptiveField',
        referencedDescriptiveField: 'inventoryId',
      },
      {
        column: [
          {
            key: 'rentalId',
            value: undefined,
            referencedkey: 'rentalId',
          },
        ],
        isParent: true,
        table: 'payment',
        type: 'OneToMany',
        label: 'payments',
      },
      {
        column: [
          {
            key: 'staffId',
            value: undefined,
            referencedkey: 'staffId',
          },
        ],
        isParent: false,
        table: 'staff',
        type: 'ManyToOne',
        label: 'staff',
        service: this.staffService,
        descriptiveField: 'staffDescriptiveField',
        referencedDescriptiveField: 'staffId',
      },
    ];

    this.childAssociations = this.associations.filter((association) => {
      return association.isParent;
    });

    this.parentAssociations = this.associations.filter((association) => {
      return !association.isParent;
    });
  }

  onSubmit() {
    let rental = this.itemForm.getRawValue();
    rental.lastUpdate = this.dataService.combineDateAndTime(rental.lastUpdate, rental.lastUpdateTime);
    delete rental.lastUpdateTime;
    rental.rentalDate = this.dataService.combineDateAndTime(rental.rentalDate, rental.rentalDateTime);
    delete rental.rentalDateTime;
    rental.returnDate = this.dataService.combineDateAndTime(rental.returnDate, rental.returnDateTime);
    delete rental.returnDateTime;
    super.onSubmit(rental);
  }
}
